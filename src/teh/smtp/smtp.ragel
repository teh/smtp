package smtp

import (
	"fmt"
	"errors"
	"bytes"
)

// Good introduction on smtp: http://cr.yp.to/smtp/request.html The
// email address parser is actually wrong, see
// http://en.wikipedia.org/wiki/Email_address#Local_part
// for a correct parser. It's an OK approximation for now though.

%%{
machine smtp;

newline = '\r'? '\n';

domain = ([a-zA-Z0-9]+ ('.' [a-zA-Z0-9]+)*);

ipv4_part = digit{1,3} | '0x'[0-9a-fA-F]{1,2} | '0' digit{1,3};
ipv4 = ipv4_part '.' ipv4_part ('.' ipv4_part ('.' ipv4_part)?)?;
ipv6_part = digit{1,4};
ipv6 = ("IPv6:")? ipv6_part (':'{1,2} ipv6_part){1,10};

action storeData {
	parser.buffer.Write(data[pb:p])
	parser.current.Data = parser.buffer.Bytes()
	parser.buffer = nil
}

action startRecording {
	pb = p
	parser.buffer = bytes.NewBuffer(nil)
}

host = domain
	%storeData
    >startRecording
	| ('[' ipv4 ']')
    %storeData
    >startRecording
	| ('[' ipv6 ']')
    %storeData
    >startRecording;

# only PLAIN auth can have initial data
auth = [A-Z\-a-z=]+
	%storeData
    >startRecording;

ignore_routes = ('@' [^:]+ ':')?;

need_quote = [a-zA-Z0-9\(\)\[\]<>:,;!#@_\-.\$%&'*/=?^`{}~|+ ] | '\\"';
quoted_chars = [a-zA-Z0-9\(\)\[\]<>:,;!#\@_\-.$%&'*/=?^`{}~|+] | '\\' need_quote;
real_address = (('"' need_quote+  '"' | quoted_chars+)+ ('@' domain)?)
    %storeData
    >startRecording;

address = '<' ignore_routes real_address '>';

# have to fit at least a space and an md5 sum, hence 45
base64 = [A-Za-z+=/0-9]{45,}
    %storeData
    >startRecording;

mail_options = (
    ' BODY=8BITMIME'
	%{parser.current.BodyType = BodyType8BITMIME}
	| ' BODY=7BIT'
	%{parser.current.BodyType = BodyType7BIT}
	| ' ' # some people send space but no BODY
	| ' SIZE=' digit+
)*;

MAIL = [Ff][Rr][Oo][Mm] ':' address mail_options;
RCPT = [Tt][Oo] ':' address;

do = ("HELO " host) %{parser.current.Verb = VerbHELO}
    | ("EHLO " host) %{parser.current.Verb = VerbEHLO}
	| "RSET" %{parser.current.Verb = VerbRSET}
	| ("MAIL " MAIL) %{parser.current.Verb = VerbMAIL}
	| ("RCPT " RCPT) %{parser.current.Verb = VerbRCPT}
	| "DATA" %{parser.current.Verb = VerbDATA}
	| "QUIT" %{parser.current.Verb = VerbQUIT}
	| ("AUTH PLAIN " auth) %{parser.current.Verb = VerbAUTH_PLAIN}
	| "AUTH PLAIN" %{parser.current.Verb = VerbAUTH_PLAIN}
	| "AUTH DIGEST-MD5" %{parser.current.Verb = VerbAUTH_DIGEST_MD5}
	| "AUTH CRAM-MD5" %{parser.current.Verb = VerbAUTH_CRAM_MD5}
	| "STARTTLS" %{parser.current.Verb = VerbSTARTTLS}
	| ("VRFY " [^\n\r]+) %{parser.current.Verb = VerbVRFY}
    | base64 %{parser.current.Verb = VerbBASE64}
	;

line = do newline;
# break after we have a valid line.
main := line @{fbreak;};
}%%

%%write data;

var Dangling = errors.New("DANGLING")

func NewParser() *Parser {
	return &Parser{cs: smtp_en_main}
}

// Feed new bytes while keepting track of state in parser.current. If
// error is `Dangling` then more data is needed for a successfull
// parse. If error is nil then parser.current contains the new action
// item. Bytes from `data` are copied, enabling the called to recycle
// data slice.
//
// Gotchas: * current is not transactional and can contain
// intermediate values. * Parsing is not bounded: the internal
// parser.buffer grows as much as the input, restrictions need to be
// imposed from the outside (using e.g. a LimitReader).
func (parser *Parser) Feed(data []byte) (remaining []byte, err error) {
	var p, pb int
	cs := parser.cs
	pe := len(data)

	%%write exec;

	if cs == smtp_error {
		return data[p:], fmt.Errorf("Invalid character in pos %d: `%c`.", p, data[p])
	}

	// Not yet a full parse, remeber everything from pb to p if we are
	// recording.
	if cs < smtp_first_final {
		if parser.buffer != nil {
			_, err := parser.buffer.Write(data[pb:p])
			if err != nil {
				return data[p:], fmt.Errorf("Could not buffer data: %s", err)
			}
		}
		parser.cs = cs
		return data[p:], Dangling
	}

	// Full parse:
	parser.cs = smtp_en_main
	return data[p:], nil
}
